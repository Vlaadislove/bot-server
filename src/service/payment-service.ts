import { v4 as uuidv4 } from 'uuid';
import { createPaymentApi, getPaymentApi } from '../api/apiYoo';
import PaymentSchema from '../models/payment-model';
import SubscriptionSchema from '../models/subscription-model';
import { addClient } from './xray-service';
import { bot } from '../index'
import { InlineKeyboard } from 'grammy';
import { checkServer, simulateAsyncOperation } from './other-service';
import SubscriptionFreeSchema from '../models/free-subscription-model';
import UserSchema from '../models/user-model';
import ServerSchema from '../models/server-model';
import * as settings from "../settings"


export const createPayment = async (userId: number, price: number) => {
    const idempotenceKeyClient = uuidv4()
    const payment = await createPaymentApi(price, idempotenceKeyClient)

    if (!payment) return { error: { message: 'Session not found' } }

    const pay = new PaymentSchema({
        price,
        userId,
        paymentId: payment.id,
        idempotenceKeyClient,
        status: payment.status,
        confirmationUrl: payment.confirmation.confirmation_url
    })
    await pay.save()

    return { paymentId: payment.id, url: payment.confirmation.confirmation_url }
}

export const checkPayment = async (paymentIdClient: string, userId: number, price: string) => {
    let response;
    let stopLoop = false;

    while (!stopLoop) {
        try {
            response = await getPaymentApi(paymentIdClient);
            if (!response) return { error: { message: 'Session not found' } }

            switch (response.status) {
                case "succeeded": {
                    const payment = await PaymentSchema.findOne({ paymentId: paymentIdClient })
                    if (payment) {
                        payment.status = "succeeded"
                        await payment.save()
                    } else {
                        console.log('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ—Ç')
                        stopLoop = true
                        break
                    }
                    paySucceeded(userId, price)
                    stopLoop = true
                    break
                }
                case "canceled": {

                    const payment = await PaymentSchema.findOne({ paymentId: paymentIdClient })
                    if (payment) {
                        payment.status = "canceled"
                        await payment.save()
                    } else {
                        console.log('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                        stopLoop = true
                        break
                    }
                    console.log(Date())
                    stopLoop = true
                    break
                }
                case "pending": {
                    await simulateAsyncOperation(1000)
                    break
                }
                default:
                    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${response.status}`);
            }
        } catch (error) {
            console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
        }
    }
}

export const paySucceeded = async (userId: number, price: string) => {
    const prices: { [key: string]: number } = {
        '140': 30,
        '390': 90
    }
    const days = prices[price]
    const user = await UserSchema.findOne({ userId })

    //–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è user –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (typeof user?.inviteId == 'number' && user.userId !== user.inviteId) {
        const inviteSubFree = await SubscriptionFreeSchema.findOne({ userId: user.inviteId, statusSub: true })
        const inviteSub = await SubscriptionSchema.findOne({ userId: user.inviteId, statusSub: true })

        if (inviteSubFree) {
            const { userId, config, uuid, statusSub, subExpire, server } = inviteSubFree

            const expirationDate = new Date(new Date(`${subExpire}`).getTime() + settings.DAY_FOR_INVITE * 24 * 60 * 60 * 1000);

            const subscription = new SubscriptionSchema({
                userId,
                config,
                server,
                uuid,
                statusSub,
                subExpire: expirationDate,
            })
            inviteSubFree.statusSub = false
            user.inviteId = `${user.inviteId}`
            await Promise.all([
                user.save(),
                subscription.save(),
                inviteSubFree.save()
            ])
            await bot.api.sendMessage(parseInt(user.inviteId), `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ <b>${settings.DAY_FOR_INVITE}</b> –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã <b>${user.first_name}!</b>`, {
                parse_mode: 'HTML'
            })
        } else if (inviteSub) {
            const expirationDate = new Date(new Date(`${inviteSub.subExpire}`).getTime() + settings.DAY_FOR_INVITE * 24 * 60 * 60 * 1000);
            inviteSub.subExpire = expirationDate
            inviteSub.warningDay = []
            user.inviteId = `${user.inviteId}`
            await Promise.all([
                user.save(),
                inviteSub.save()
            ])

            await bot.api.sendMessage(parseInt(user.inviteId), `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ <b>${settings.DAY_FOR_INVITE}</b> –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã <b>${user.first_name}!</b>`, {
                parse_mode: 'HTML'
            })
        }
    }

    const subscriptionFreeCheck = await SubscriptionFreeSchema.findOne({ userId, statusSub: true })
    const subscriptionCheck = await SubscriptionSchema.findOne({ userId, statusSub: true })

    if (subscriptionFreeCheck) {

        const { userId, config, uuid, statusSub, subExpire, server } = subscriptionFreeCheck

        const expirationDate = new Date(new Date(`${subExpire}`).getTime() + days * 24 * 60 * 60 * 1000);

        const subscription = new SubscriptionSchema({
            userId,
            config,
            server,
            uuid,
            statusSub,
            subExpire: expirationDate,
        })
        subscriptionFreeCheck.statusSub = false

        await Promise.all([
            subscription.save(),
            subscriptionFreeCheck.save()
        ])
        
        await bot.api.sendMessage(userId, `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ <b>${days}</b> –¥–Ω–µ–π!`, {
            parse_mode: 'HTML'
        })
        await bot.api.sendMessage(userId, `–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ <b>VPNinja</b> ‚ù§Ô∏è`, {
            parse_mode: 'HTML'
        })
        return

    } else if (subscriptionCheck) {
        const expirationDate = new Date(new Date(`${subscriptionCheck.subExpire}`).getTime() + days * 24 * 60 * 60 * 1000);

        subscriptionCheck.subExpire = expirationDate
        subscriptionCheck.warningDay = []
        await subscriptionCheck.save()
        await bot.api.sendMessage(userId, `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ <b>${days}</b> –¥–Ω–µ–π!`, {
            parse_mode: 'HTML'
        })
        await bot.api.sendMessage(userId, `–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ <b>VPNinja</b> ‚ù§Ô∏è`, {
            parse_mode: 'HTML'
        })
        return
    }

    const server = await checkServer(userId)

    if (!server?.cookie) return null

    const data = await addClient(userId, server)
    if (!data) return null

    const { config, uuid } = data

    const subscription = new SubscriptionSchema({
        userId,
        config: config,
        uuid,
        server,
        statusSub: true,
        subExpire: new Date(Date.now() + days * 24 * 60 * 60 * 1000),
    })

    if (user && !user?.useFreeSub) {
        user.useFreeSub = true
        user.save()
    }
    await ServerSchema.findByIdAndUpdate(server.id, {
        $inc: { quantityUsers: 1 },
    }) // -1
    await subscription.save()
    const oneMonthInlineBoard = new InlineKeyboard().text('üóÇ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', `instructions`)
    await bot.api.sendMessage(userId, '‚ùóÔ∏è<i>–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.</i>‚ùóÔ∏è', {
        parse_mode: 'HTML'
    })
    await bot.api.sendMessage(userId, `<code>${config}</code>`, {
        parse_mode: 'HTML'
    })
    await bot.api.sendMessage(userId, '–≠—Ç–æ –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ ‚¨Ü –¥–ª—è VPN, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ(—á–µ—Ä–µ–∑ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üóÇ<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º!', {
        reply_markup: oneMonthInlineBoard,
        parse_mode: 'HTML'

    })
}



