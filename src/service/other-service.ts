import ServerSchema from './../models/server-model';
import { GrammyError, HttpError, InlineKeyboard } from 'grammy'
import { bot } from '../index'
import SubscriptionFreeSchema from '../models/free-subscription-model'
import UserSchema from '../models/user-model'
import { addClient } from './xray-service'



export const freeSubscription = async (userId: number) => {
    try {
        const sub = await SubscriptionFreeSchema.findOne({ userId, statusSub: true })
        const user = await UserSchema.findOne({ userId })

        if (sub || !user || user.useFreeSub) return { status: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏' }

        const server = await checkServer()

        if (!server.cookie) return null

        const data = await addClient(userId, server.cookie, server.baseUrl)
        if (!data) return null
        const { config, uuid } = data

        const subscription = new SubscriptionFreeSchema({
            userId,
            config,
            server,
            uuid,
            statusSub: true,
            subExpire: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),
        })

        user.useFreeSub = true
        await ServerSchema.findByIdAndUpdate(server.id, {
            $inc: { quantityUsers: 1 },
        }) // -1
        await user.save()
        await subscription.save()

        const oneMonthInlineBoard = new InlineKeyboard().text('üóÇ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', `instructions`)
        await bot.api.sendMessage(userId, '‚ùóÔ∏è<i>–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.</i>‚ùóÔ∏è', {
            parse_mode: 'HTML'
        })
        await bot.api.sendMessage(userId, `<code>${config}</code>`, {
            parse_mode: 'HTML'
        })
        await bot.api.sendMessage(userId, '–≠—Ç–æ –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ ‚¨Ü –¥–ª—è VPN, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ(—á–µ—Ä–µ–∑ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)  –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üóÇ<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º!', {
            reply_markup: oneMonthInlineBoard,
            parse_mode: 'HTML'
        })
        console.log(`–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} –ø–æ–ª—É—á–µ–Ω–∞`)
    } catch (error) {
        console.log(error)
    }

}


export function simulateAsyncOperation(ms: number) {
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            resolve("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏");
        }, ms);
    });
}

export const checkServer = async () => {
    const servers = await ServerSchema.find({ status: true })
    const serversFilter = servers.filter((item) => item.quantityUsers <= 100)

    let result = serversFilter[0];

    for (let i = 1; i < serversFilter.length; i++) {
        if (serversFilter[i].quantityUsers < result.quantityUsers) {
            result = serversFilter[i];
        }
    }
    return result;
};

