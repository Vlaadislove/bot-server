import ServerSchema from './../models/server-model';
import { GrammyError, HttpError, InlineKeyboard } from 'grammy'
import { bot } from '../index'
import SubscriptionFreeSchema from '../models/free-subscription-model'
import UserSchema from '../models/user-model'
import { addClient } from './xray-service'
import * as settings from "../settings"



export const freeSubscription = async (userId: number) => {
	try {
		const sub = await SubscriptionFreeSchema.findOne({ userId, statusSub: true })
		const user = await UserSchema.findOne({ userId })

		if (sub || !user || user.useFreeSub) return { status: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏' }

		const server = await checkServer(userId)

		if (!server?.cookie) return null
		const data = await addClient(userId, server)
		if (!data) return null
		const { config, uuid } = data

		const subscription = new SubscriptionFreeSchema({
			userId,
			config,
			server,
			uuid,
			statusSub: true,
			subExpire: new Date(Date.now() + settings.FREE_DAY * 24 * 60 * 60 * 1000),
		})

		user.useFreeSub = true
		await ServerSchema.findByIdAndUpdate(server.id, {
			$inc: { quantityUsers: 1 },
		}) // -1
        await Promise.all([
            user.save(),
            subscription.save()
        ])


		const oneMonthInlineBoard = new InlineKeyboard().text('üóÇ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', `instructions`)
		await bot.api.sendMessage(userId, '‚ùóÔ∏è<i>–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.</i>‚ùóÔ∏è', {
			parse_mode: 'HTML'
		})
		await bot.api.sendMessage(userId, `<code>${config}</code>`, {
			parse_mode: 'HTML'
		})
		await bot.api.sendMessage(userId, '–≠—Ç–æ –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ ‚¨Ü –¥–ª—è VPN, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ(—á–µ—Ä–µ–∑ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)  –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üóÇ<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º!', {
			reply_markup: oneMonthInlineBoard,
			parse_mode: 'HTML'
		})
	} catch (error) {
		console.log(error)
	}

}


export function simulateAsyncOperation(ms: number) {
	return new Promise(function (resolve) {
		setTimeout(function () {
			resolve("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏");
		}, ms);
	});
}


export const checkServer = async (userId:number) => {
	const servers = await ServerSchema.find({ status: true })
	const serversFilter = servers.filter((item) => item.quantityUsers <= settings.MAX_USERS_ON_SERVER)

	let result = serversFilter[0];
    if(!result){
        await bot.api.sendMessage(userId, `<b>–ë–ï–ó –ü–ê–ù–ò–ù–ö–ò!</b> –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ ${settings.SUPPORT_NAME} –∏ –º—ã –≤—Å–µ —Ä–µ—à–∏–º! –ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, —Å–¥–µ–ª–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫!`, {
			parse_mode: 'HTML'
		})
        return
    }
	for (let i = 1; i < serversFilter.length; i++) {
		if (serversFilter[i].quantityUsers < result.quantityUsers) {
			result = serversFilter[i];
		}
	}
	return result;
};

